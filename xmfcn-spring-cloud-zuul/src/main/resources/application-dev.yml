#不用配置中心的时候可以使用这个文件读取本地配置文件
server:
  port: 8082
  tomcat:
    max-connections: 20000 # 最大连接数 表示有多少个socket连接到tomcat上 NIO模式下默认是10000
    accept-count: 200 # 允许的最大连接数，即等待队列 应大于等于max-threads 默认值75
    max-threads: 2000     # 最大连接线程数 默认值75
    uri-encoding: UTF-8
    accesslog:
      enabled: true
      directory: /opt/mnt_file/logs/zuul/
      pattern: '%h %l %u %t "%r" %s %b "%{Referer}i" "%{User-Agent}i" %D(ms)'
    basedir: /opt/mnt_file/logs/tomcat_zuul/
    max-http-post-size: 50MB
  max-http-header-size: 50MB #扩展 tomcat header的长度 omcat限制了header的长度,如果你请求的数据量超过了默认的长度就会抛出越界
# 本服务需要调用的服务和授权信息-service层
base-service:
  sys-service: sys-service
  name: serviceadmin
  password: service987423Ds887
api:
  application: user-api
  name: apiadmin
  password: api987423Ds887

eureka:
  # 链接eureka的用户名密码
  name: xmfadmin
  password: eureka-xmfp23dw
  instance:
    leaseRenewalIntervalInSeconds: 1     # 心跳时间，即服务续约间隔时间（缺省为30s）
    leaseExpirationDurationInSeconds: 2  # 发呆时间，即服务续约到期时间（缺省为90s）
  client:
    serviceUrl:
      defaultZone: http://${eureka.name}:${eureka.password}@localhost:8081/eureka/
    healthcheck:
      enabled: true                           # 开启健康检查（依赖spring-boot-starter-actuator）
    registry-fetch-interval-seconds: 1    # 表示eureka client间隔多久去拉取服务注册信息，默认为30秒
    #Eureka服务注册中心也会尝试把自己当做客户端来注册自己，就会出现下面的错误
spring:
  application:
    name: base-zuul
  cloud:
    loadbalancer:
      retry:
        enabled: true
  main:
    allow-bean-definition-overriding: true # 防止'${base-service: sys-service}.FeignClientSpecification', defined in null, could not be registered 多个接口请求服务名称相同
  sleuth:
    sampler:
      probability: 1 #收集日志比例 100%
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
# 网关路由
zuul:
  host:
    maxTotalConnections: 500 #适用于ApacheHttpClient，如果是okhttp无效。每个服务的http客户端连接池最大连接，默认是200.
    maxPerRouteConnections: 100 #适用于ApacheHttpClient，如果是okhttp无效。每个route可用的最大连接数，默认值是20。
    socket-timeout-millis: 3000 #socket 超时时间
    connect-timeout-millis: 120000 #连接超时时间
  semaphore:  #Zuul的隔离策略为SEMAPHORE时
   max-semaphores: 1000 #最大信号量
  sensitive-headers:  # 共享 Authorization 请求头
  add-host-header: true #传输真实请求主机信息到服务层
  retryable: true #是否开启重试功能
  MaxAutoRetries: 0 #同一个Server重试的次数(除去首次)
  MaxAutoRetriesNextServer: 2 #切换相同Server的次数
  OkToRetryOnAllOperations: false  # 是否所有操作都进行重试

  routes:
    user-api:
      path: /user/**
      serviceId: user-api
    job-admin:
      path: /job/**
      serviceId: job-admin
    wechat-api:
      path: /wechat/**
      serviceId: wechat-api

# 配置ribbon 配置下列值并非ribbon get set 属性，因此鼠标点击无用，但是ribbon会自动加载以下信息
ribbon:
  NFLoadBalancerClassName: com.netflix.loadbalancer.DynamicServerListLoadBalancer  #负载均衡器
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule # 负载策略 ------WeightedResponseTimeRule根据响应时间分配一个weight，响应时间越长，weight越小，被选中的可能性越低。
  OkToRetryOnAllOperations: false  # 是否所有操作都进行重试
  retryable: false #是否开启重试功能
  MaxAutoRetries: 0 #同一个Server重试的次数(除去首次)
  MaxAutoRetriesNextServer: 0 #切换相同Server的次数
  MaxHttpConnectionsPerHost: 200 #每个节点Http的最大连接数 默认值50
  MaxConnectionsPerHost: 200 #每个节点的最大连接数 默认值50
  MaxTotalHttpConnections: 2000  #http总连接数 默认值200
  MaxTotalConnections: 2000 # 总连接数 默认值200
  PoolMinThreads: 1 #线程池最小容量 默认值1 值范围1-10
  PoolMaxThreads: 300 #线程池最大容量 默认值 200 值范围200-400
  ConnectTimeout: 10000
  ReadTimeout: 60000 # ribbon 读取返回信息的超时时间，值范围30000-300000
  httpclient:
    enabled: true #okhttp替换httpclient OkHttp 会使用连接池来复用连接以提高效率。OkHttp 提供了对 GZIP 的默认支持来降低传输内容的大小。OkHttp 也提供了对 HTTP 响应的缓存机制，可以避免不必要的网络请求
  okhttp:
    enabled: false #okhttp替换httpclient OkHttp 会使用连接池来复用连接以提高效率。OkHttp 提供了对 GZIP 的默认支持来降低传输内容的大小。OkHttp 也提供了对 HTTP 响应的缓存机制，可以避免不必要的网络请求
  eager-load:
    enabled: true
# timeout config
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true # 开启hystrix 熔断。ribbonTimeout = (ribbonReadTimeout + ribbonConnectTimeout) * (maxAutoRetries + 1) * (maxAutoRetriesNextServer + 1);
        isolation:
          thread:
            timeoutInMilliseconds: 70000 #zuul 配置的hystrix 熔断时间，返回时间超过这个时间并不会立即返回，而是等到请求返回或超过ribbon的返回时间时触发熔断器。  # 即使请求数据返回，但是超过熔断超时时间依然是触发熔断，而不是返回数据。

# LOGGING
logging:
    config: classpath:logback.xml