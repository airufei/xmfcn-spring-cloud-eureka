#不用配置中心的时候可以使用这个文件读取本地配置文件
# ==Tomcat配置==
server:
  port: 8090
  tomcat:
    max-connections: 20000 # 最大连接数 表示有多少个socket连接到tomcat上 NIO模式下默认是10000
    accept-count: 200 # 允许的最大连接数，即等待队列 应大于等于max-threads 默认值75
    max-threads: 2000     # 最大连接线程数 默认值75
    uri-encoding: UTF-8
    accesslog:
      enabled: true
      directory: /opt/mnt_file/logs/kafka-service/
      pattern: '%h %l %u %t "%r" %s %b "%{Referer}i" "%{User-Agent}i" %D(ms)'
  max-http-header-size: 10000000 #扩展 tomcat header的长度 omcat限制了header的长度,如果你请求的数据量超过了默认的长度就会抛出越界，

  # 本服务需要调用的服务和授权信息-service层
base-service:
  sys-service: sys-service
  name: serviceadmin
  password: service987423Ds887

  # eureka 配置
eureka:
  # 链接eureka的用户名密码
  name: xmfadmin
  password: eureka-xmfp23dw
  client:
    serviceUrl:
      defaultZone:  http://${eureka.name}:${eureka.password}@localhost:8081/eureka/
    healthcheck:
      enabled: true                           # 开启健康检查（依赖spring-boot-starter-actuator）
    registry-fetch-interval-seconds: 1    # 表示eureka client间隔多久去拉取服务注册信息，默认为30秒
    #Eureka服务注册中心也会尝试把自己当做客户端来注册自己，就会出现下面的错误
  instance:
    leaseRenewalIntervalInSeconds: 1     # 心跳时间，即服务续约间隔时间（缺省为30s）
    leaseExpirationDurationInSeconds: 2  # 发呆时间，即服务续约到期时间（缺省为90s）
spring:
  application:
    name: kafka-service
  cloud:
    loadbalancer:
      retry:
        enabled: true
  main:
    allow-bean-definition-overriding: true # 防止'${base-service:sys-service}.FeignClientSpecification', defined in null, could not be registered 多个接口请求服务名称相同
  security:   # 可连接 service 的用户和密码
    user:
      name: serviceadmin
      password: service987423Ds887
      roles: admin
  sleuth:
    sampler:
      probability: 1 #收集日志比例 100%
application-dev:
  yml:# LOGGING
logging:
  config: classpath:logback.xml

# 配置ribbon 配置下列值并非ribbon get set 属性，因此鼠标点击无用，但是ribbon会自动加载以下信息
ribbon:
  NFLoadBalancerClassName: com.netflix.loadbalancer.DynamicServerListLoadBalancer  #负载均衡器
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule # 负载策略 ------WeightedResponseTimeRule根据响应时间分配一个weight，响应时间越长，weight越小，被选中的可能性越低。
  OkToRetryOnAllOperations: false  # 是否所有操作都进行重试
  retryable: true #是否开启重试功能
  MaxAutoRetries: 0 #同一个Server重试的次数(除去首次)
  MaxAutoRetriesNextServer: 2 #切换相同Server的次数
  MaxHttpConnectionsPerHost: 200 #每个节点Http的最大连接数 默认值50
  MaxConnectionsPerHost: 200 #每个节点的最大连接数 默认值50
  MaxTotalHttpConnections: 2000  #http总连接数 默认值200
  MaxTotalConnections: 2000 # 总连接数 默认值200
  PoolMinThreads: 1 #线程池最小容量 默认值1 值范围1-10
  PoolMaxThreads: 300 #线程池最大容量 默认值 200 值范围200-400
  ConnectTimeout: 2000
  ReadTimeout: 20000 # ribbon 读取返回信息的超时时间，值范围30000-300000
  httpclient:
    enabled: true
  eager-load:
    enabled: true

kafka:
  server: 10.105.10.12:9092
  producer:
    ack: 1 # 是判别请求是否为完整的条件（就是是判断是不是成功发送了）。我们指定了“all”将会阻塞消息，这种设置性能最低，但是是最可靠的。
    retries: 0 # 如果请求返回可重试的错误，例如首领选举或网络连接异常等可在几秒钟内解决，生产者会自动发起重试。
    batchSize: 16384 #缓存大小，值较大的话将会产生更大的批。并需要更多的内存（因为每个“活跃”的分区都有1个缓冲区）
    lingerMs: 0 # 默认缓冲可立即发送，即便缓冲空间还没有满，但是，如果你想减少请求的数量，可以设置linger.ms大于0。这将指示生产者发送请求之前等待一段时间，希望更多的消息填补到未满的批中。需要注意的是，在高负载下，相近的时间一般也会组成批，即使是 linger.ms=0。在不处于高负载的情况下，如果设置比0大，以少量的延迟代价换取更少的，更有效的请求。
    bufferMemory: 33554432 # 控制生产者可用的缓存总量，如果消息发送速度比其传输到服务器的快，将会耗尽这个缓存空间。当缓存空间耗尽，      其他发送调用将被阻塞，阻塞时间的阈值通过max.block.ms设定，之后它将抛出一个TimeoutException。
    compressionType: gzip # 该参数可以设置为snappy、gzip、lz4，snappy占用CPU较少，可提供较好的性能和压缩比，gzip占用CPU多，但提供更高压缩比。
    keySerializerClass: org.apache.kafka.common.serialization.StringSerializer
    valueSerializerClass: org.apache.kafka.common.serialization.StringSerializer